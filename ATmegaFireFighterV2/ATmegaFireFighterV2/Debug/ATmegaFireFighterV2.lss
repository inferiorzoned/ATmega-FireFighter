
ATmegaFireFighterV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000b84  00000c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800086  00800086  00000c3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bc4  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074e  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da5  00000000  00000000  000030b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072b  00000000  00000000  000040d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec7  00000000  00000000  000047ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000056c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 05 	call	0xa10	; 0xa10 <main>
  8a:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9pinChangeii>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <_Z9pinChangeii+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <_Z9pinChangeii+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	11 f4       	brne	.+4      	; 0xa0 <_Z9pinChangeii+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <_Z9pinChangeii+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <_Z9pinChangeii+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
  b8:	11 f4       	brne	.+4      	; 0xbe <_Z9pinChangeii+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <_Z9pinChangeii+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <_Z9pinChangeii+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
  d6:	11 f4       	brne	.+4      	; 0xdc <_Z9pinChangeii+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <_Z9pinChangeii+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <_Z9pinChangeii+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <_Z9pinChangeii+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
  f8:	08 95       	ret
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <_Z9pinChangeii+0x72>
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <_Z9pinChangeii+0x7c>
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <_Z9pinChangeii+0x86>
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <_Z9pinChangeii+0x90>
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <_Z9pinChangeii+0x9a>
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <_Z9pinChangeii+0xa4>
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <_Z9pinChangeii+0xae>
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <_Z9pinChangeii+0xb8>
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <_Z9pinChangeii+0xc2>
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <_Z9pinChangeii+0xcc>
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <_Z9pinChangeii+0xd6>
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <_Z9pinChangeii+0xe0>
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <_Z9pinChangeii+0xea>
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <_Z9pinChangeii+0xf4>
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <_Z9pinChangeii+0xfe>
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <_Z9pinChangeii+0x108>
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <_Z9pinChangeii+0x112>
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <_Z9pinChangeii+0x11c>
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <_Z9pinChangeii+0x126>
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <_Z9pinChangeii+0x130>
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <_Z9pinChangeii+0x13a>
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <_Z9pinChangeii+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <_Z9pinChangeii+0x27e>
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <_Z9pinChangeii+0x14c>
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <_Z9pinChangeii+0x156>
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <_Z9pinChangeii+0x160>
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <_Z9pinChangeii+0x16a>
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <_Z9pinChangeii+0x174>
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <_Z9pinChangeii+0x17e>
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <_Z9pinChangeii+0x188>
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <_Z9pinChangeii+0x192>
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <_Z9pinChangeii+0x19c>
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <_Z9pinChangeii+0x1a6>
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <_Z9pinChangeii+0x1b0>
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <_Z9pinChangeii+0x1ba>
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <_Z9pinChangeii+0x1c4>
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <_Z9pinChangeii+0x1ce>
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <_Z9pinChangeii+0x1d8>
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <_Z9pinChangeii+0x1e2>
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <_Z9pinChangeii+0x1ec>
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <_Z9pinChangeii+0x1f6>
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <_Z9pinChangeii+0x200>
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <_Z9pinChangeii+0x20a>
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <_Z9pinChangeii+0x214>
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <_Z9pinChangeii+0x21e>
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <_Z9pinChangeii+0x228>
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <_Z9pinChangeii+0x232>
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <_Z9pinChangeii+0x23c>
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <_Z9pinChangeii+0x246>
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <_Z9pinChangeii+0x250>
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <_Z9pinChangeii+0x25a>
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <_Z9pinChangeii+0x264>
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <_Z9pinChangeii+0x26e>
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <_Z9pinChangeii+0x278>
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <_Z9pinChangeii+0x27e>
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <_Z9Lcd4_Portc>:
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <_Z9Lcd4_Portc+0x16>
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 326:	06 c0       	rjmp	.+12     	; 0x334 <_Z9Lcd4_Portc+0x22>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <_Z9Lcd4_Portc+0x34>
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 344:	06 c0       	rjmp	.+12     	; 0x352 <_Z9Lcd4_Portc+0x40>
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <_Z9Lcd4_Portc+0x52>
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 362:	06 c0       	rjmp	.+12     	; 0x370 <_Z9Lcd4_Portc+0x5e>
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <_Z9Lcd4_Portc+0x70>
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 380:	06 c0       	rjmp	.+12     	; 0x38e <_Z9Lcd4_Portc+0x7c>
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <_Z8Lcd4_Cmdc>:
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8a e1       	ldi	r24, 0x1A	; 26
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <_Z9Lcd4_Portc>
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 3b4:	89 ef       	ldi	r24, 0xF9	; 249
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <_Z8Lcd4_Cmdc+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <_Z8Lcd4_Cmdc+0x2c>
 3be:	00 00       	nop
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 3cc:	89 ef       	ldi	r24, 0xF9	; 249
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <_Z8Lcd4_Cmdc+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z8Lcd4_Cmdc+0x44>
 3d6:	00 00       	nop
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <_Z10Lcd4_Clearv>:
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 3e8:	08 95       	ret

000003ea <_Z15Lcd4_Set_Cursorcc>:
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	86 0f       	add	r24, r22
 3f6:	82 95       	swap	r24
 3f8:	8f 70       	andi	r24, 0x0F	; 15
 3fa:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 3fe:	8c 2f       	mov	r24, r28
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 406:	0c c0       	rjmp	.+24     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	51 f4       	brne	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40c:	80 ec       	ldi	r24, 0xC0	; 192
 40e:	86 0f       	add	r24, r22
 410:	82 95       	swap	r24
 412:	8f 70       	andi	r24, 0x0F	; 15
 414:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 418:	8c 2f       	mov	r24, r28
 41a:	8f 70       	andi	r24, 0x0F	; 15
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <_Z9Lcd4_Initv>:
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 89 01 	call	0x312	; 0x312 <_Z9Lcd4_Portc>
 42a:	87 e8       	ldi	r24, 0x87	; 135
 42c:	93 e1       	ldi	r25, 0x13	; 19
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <_Z9Lcd4_Initv+0xa>
 432:	00 c0       	rjmp	.+0      	; 0x434 <_Z9Lcd4_Initv+0x10>
 434:	00 00       	nop
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 43c:	81 ee       	ldi	r24, 0xE1	; 225
 43e:	94 e0       	ldi	r25, 0x04	; 4
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <_Z9Lcd4_Initv+0x1c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <_Z9Lcd4_Initv+0x22>
 446:	00 00       	nop
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 44e:	8d eb       	ldi	r24, 0xBD	; 189
 450:	9a e0       	ldi	r25, 0x0A	; 10
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <_Z9Lcd4_Initv+0x2e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <_Z9Lcd4_Initv+0x34>
 458:	00 00       	nop
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 c9 01 	call	0x392	; 0x392 <_Z8Lcd4_Cmdc>
 48a:	08 95       	ret

0000048c <_Z15Lcd4_Write_Charc>:
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 49c:	8c 2f       	mov	r24, r28
 49e:	82 95       	swap	r24
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	0e 94 89 01 	call	0x312	; 0x312 <_Z9Lcd4_Portc>
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	8b e1       	ldi	r24, 0x1B	; 27
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <_Z15Lcd4_Write_Charc+0x2a>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <_Z15Lcd4_Write_Charc+0x30>
 4bc:	00 00       	nop
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	8b e1       	ldi	r24, 0x1B	; 27
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 4ca:	89 ef       	ldi	r24, 0xF9	; 249
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <_Z15Lcd4_Write_Charc+0x42>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <_Z15Lcd4_Write_Charc+0x48>
 4d4:	00 00       	nop
 4d6:	8c 2f       	mov	r24, r28
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	0e 94 89 01 	call	0x312	; 0x312 <_Z9Lcd4_Portc>
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	8b e1       	ldi	r24, 0x1B	; 27
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 4ea:	89 ef       	ldi	r24, 0xF9	; 249
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <_Z15Lcd4_Write_Charc+0x62>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <_Z15Lcd4_Write_Charc+0x68>
 4f4:	00 00       	nop
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	8b e1       	ldi	r24, 0x1B	; 27
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 49 00 	call	0x92	; 0x92 <_Z9pinChangeii>
 502:	89 ef       	ldi	r24, 0xF9	; 249
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <_Z15Lcd4_Write_Charc+0x7a>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <_Z15Lcd4_Write_Charc+0x80>
 50c:	00 00       	nop
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <_Z17Lcd4_Write_StringPKc>:
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
 518:	88 81       	ld	r24, Y
 51a:	88 23       	and	r24, r24
 51c:	31 f0       	breq	.+12     	; 0x52a <_Z17Lcd4_Write_StringPKc+0x18>
 51e:	21 96       	adiw	r28, 0x01	; 1
 520:	0e 94 46 02 	call	0x48c	; 0x48c <_Z15Lcd4_Write_Charc>
 524:	89 91       	ld	r24, Y+
 526:	81 11       	cpse	r24, r1
 528:	fb cf       	rjmp	.-10     	; 0x520 <_Z17Lcd4_Write_StringPKc+0xe>
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <_Z10initializev>:
volatile int init_step;
volatile int fire_state_counter;

void initialize()
{
	DDRA |= 0xFD;	//PORT-A as OUTPUT, except PA1(ADC1 pin)
 530:	8a b3       	in	r24, 0x1a	; 26
 532:	8d 6f       	ori	r24, 0xFD	; 253
 534:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0xFF;	//PORT-B as OUTPUT
 536:	87 b3       	in	r24, 0x17	; 23
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0xFF;	//PORT-C as OUTPUT of SENSOR
 53c:	94 b3       	in	r25, 0x14	; 20
 53e:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xFF;	//PORT-D as OUTPUT
 540:	91 b3       	in	r25, 0x11	; 17
 542:	81 bb       	out	0x11, r24	; 17
	* and in this mode TOP value should be set to ICR1
	*
	* Set CS12:CS11:CS10 = 001
	* to set prescaler = 1
	***/
	TCCR1A &= 0;
 544:	8f b5       	in	r24, 0x2f	; 47
 546:	1f bc       	out	0x2f, r1	; 47
	TCCR1B &= 0;
 548:	8e b5       	in	r24, 0x2e	; 46
 54a:	1e bc       	out	0x2e, r1	; 46
	
	TCCR1A |= 1<<WGM11 | 1<<COM1A1;	// Set WGM11=1, COM1A1=1
 54c:	8f b5       	in	r24, 0x2f	; 47
 54e:	82 68       	ori	r24, 0x82	; 130
 550:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10; // Set WGM13=1, WGM12=1, CS10=1
 552:	8e b5       	in	r24, 0x2e	; 46
 554:	89 61       	ori	r24, 0x19	; 25
 556:	8e bd       	out	0x2e, r24	; 46
	ICR1 = SERVO_SENSOR_TOP;
 558:	8f e1       	ldi	r24, 0x1F	; 31
 55a:	9e e4       	ldi	r25, 0x4E	; 78
 55c:	97 bd       	out	0x27, r25	; 39
 55e:	86 bd       	out	0x26, r24	; 38
	
	OCR1A = SERVO_SENSOR_CENTER;
 560:	8c ed       	ldi	r24, 0xDC	; 220
 562:	95 e0       	ldi	r25, 0x05	; 5
 564:	9b bd       	out	0x2b, r25	; 43
 566:	8a bd       	out	0x2a, r24	; 42
	direction = GO_LEFT;	// Initially the servo will start sweeping left
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <direction+0x1>
 570:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <direction>
	init_step = 0;			// Start step counting from 0
 574:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <init_step+0x1>
 578:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <init_step>
	
	/***
	* LCD & ADC INITIALIZATION
	***/
	ADMUX  = 0b01000001;	// (bit 7,6)		REFS[1:0]=01	-> AVCC as reference
 57c:	81 e4       	ldi	r24, 0x41	; 65
 57e:	87 b9       	out	0x07, r24	; 7
							// (bit 4,3,2,1,0)	MUX[4:3:2:1:0]=00001 -> Input source = ADC1(PA1/pin39)
	ADCSRA = 0b10000001;	// (bit 7)			ADEN=1 -> enable ADC unit
 580:	81 e8       	ldi	r24, 0x81	; 129
 582:	86 b9       	out	0x06, r24	; 6
							// (bit 2,1,0)		ADPS[2:1:0]=001 -> Set division factor = 2
	Lcd4_Init();			// Initialize lcd for 4 bit mode
 584:	0e 94 12 02 	call	0x424	; 0x424 <_Z9Lcd4_Initv>
	
	// Initialize Fire state counter
	fire_state_counter = 0;
 588:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 58c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
	
	// Pump is off initially
	PORTC = 0x00;
 590:	15 ba       	out	0x15, r1	; 21
 592:	08 95       	ret

00000594 <_Z15get_sensor_datav>:
}

void get_sensor_data()
{
	START_ADC_CONVERSION();
 594:	36 9a       	sbi	0x06, 6	; 6
	WAIT_UNTIL_CONVERSION_END();
 596:	36 99       	sbic	0x06, 6	; 6
 598:	fe cf       	rjmp	.-4      	; 0x596 <_Z15get_sensor_datav+0x2>
	
	uint16_t res = 0;
	res = ADCL;
 59a:	84 b1       	in	r24, 0x04	; 4
	uint16_t temp;
	temp = ADCH;
 59c:	25 b1       	in	r18, 0x05	; 5
	temp = (temp << 8);
	res |= temp;
	
	sensor_value = (int) res;
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	92 2b       	or	r25, r18
 5a2:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <sensor_value+0x1>
 5a6:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <sensor_value>
 5aa:	08 95       	ret

000005ac <_Z17print_sensor_datav>:
}

void print_sensor_data()
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <_Z17print_sensor_datav+0x6>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <_Z17print_sensor_datav+0x8>
 5b4:	1f 92       	push	r1
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	Lcd4_Clear();	// Clear lcd screen before printing
 5ba:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z10Lcd4_Clearv>
	Lcd4_Set_Cursor(1,1);
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	Lcd4_Write_String("Value:");
 5c6:	80 e6       	ldi	r24, 0x60	; 96
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
	Lcd4_Set_Cursor(2,1);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	
	char str[5];
	str[4] = '\0';
 5d6:	1d 82       	std	Y+5, r1	; 0x05
	str[3] = (char)(sensor_value % 10 + 48);
 5d8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 5dc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 5e0:	2a e0       	ldi	r18, 0x0A	; 10
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 5ea:	80 5d       	subi	r24, 0xD0	; 208
 5ec:	8c 83       	std	Y+4, r24	; 0x04
	str[2] = (char)((sensor_value % 100) / 10 + 48);
 5ee:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 5f2:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 5f6:	e4 e6       	ldi	r30, 0x64	; 100
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	bf 01       	movw	r22, r30
 5fc:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 600:	b9 01       	movw	r22, r18
 602:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 606:	60 5d       	subi	r22, 0xD0	; 208
 608:	6b 83       	std	Y+3, r22	; 0x03
	str[1] = (char)((sensor_value % 1000) / 100 + 48);
 60a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 60e:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 612:	28 ee       	ldi	r18, 0xE8	; 232
 614:	33 e0       	ldi	r19, 0x03	; 3
 616:	b9 01       	movw	r22, r18
 618:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 61c:	bf 01       	movw	r22, r30
 61e:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 622:	60 5d       	subi	r22, 0xD0	; 208
 624:	6a 83       	std	Y+2, r22	; 0x02
	str[0] = (char)((sensor_value % 10000) / 1000 + 48);
 626:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 62a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 62e:	60 e1       	ldi	r22, 0x10	; 16
 630:	77 e2       	ldi	r23, 0x27	; 39
 632:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 636:	b9 01       	movw	r22, r18
 638:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 63c:	60 5d       	subi	r22, 0xD0	; 208
 63e:	69 83       	std	Y+1, r22	; 0x01
	
	Lcd4_Write_String(str);
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
}
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <_Z16print_fire_alarmv>:

void print_fire_alarm()
{
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	27 97       	sbiw	r28, 0x07	; 7
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	de bf       	out	0x3e, r29	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	cd bf       	out	0x3d, r28	; 61
	Lcd4_Clear();					//
 670:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z10Lcd4_Clearv>
	Lcd4_Set_Cursor(1,1);			// Print warning on LCD display
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	Lcd4_Write_String("Fire!!!");	//
 67c:	87 e6       	ldi	r24, 0x67	; 103
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
	// debug purpose
	char count_str[2];
	count_str[1] = '\0';
 684:	1a 82       	std	Y+2, r1	; 0x02
	count_str[0] = (char)(fire_state_counter%10 + 48);
 686:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 68a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 68e:	0a e0       	ldi	r16, 0x0A	; 10
 690:	10 e0       	ldi	r17, 0x00	; 0
 692:	b8 01       	movw	r22, r16
 694:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 698:	80 5d       	subi	r24, 0xD0	; 208
 69a:	89 83       	std	Y+1, r24	; 0x01
	Lcd4_Set_Cursor(1,12);
 69c:	6c e0       	ldi	r22, 0x0C	; 12
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	Lcd4_Write_String(count_str);
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
	
	Lcd4_Set_Cursor(2,1);
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	Lcd4_Write_String("Value:");
 6b4:	80 e6       	ldi	r24, 0x60	; 96
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
	Lcd4_Set_Cursor(2,8);
 6bc:	68 e0       	ldi	r22, 0x08	; 8
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	char str[5];
	str[4] = '\0';
 6c4:	1f 82       	std	Y+7, r1	; 0x07
	str[3] = (char)(sensor_value % 10 + 48);
 6c6:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 6ca:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 6ce:	b8 01       	movw	r22, r16
 6d0:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 6d4:	80 5d       	subi	r24, 0xD0	; 208
 6d6:	8e 83       	std	Y+6, r24	; 0x06
	str[2] = (char)((sensor_value % 100) / 10 + 48);
 6d8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 6dc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 6e0:	e4 e6       	ldi	r30, 0x64	; 100
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	bf 01       	movw	r22, r30
 6e6:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 6ea:	b8 01       	movw	r22, r16
 6ec:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 6f0:	60 5d       	subi	r22, 0xD0	; 208
 6f2:	6d 83       	std	Y+5, r22	; 0x05
	str[1] = (char)((sensor_value % 1000) / 100 + 48);
 6f4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 6f8:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 6fc:	28 ee       	ldi	r18, 0xE8	; 232
 6fe:	33 e0       	ldi	r19, 0x03	; 3
 700:	b9 01       	movw	r22, r18
 702:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 706:	bf 01       	movw	r22, r30
 708:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 70c:	60 5d       	subi	r22, 0xD0	; 208
 70e:	6c 83       	std	Y+4, r22	; 0x04
	str[0] = (char)((sensor_value % 10000) / 1000 + 48);
 710:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 714:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 718:	60 e1       	ldi	r22, 0x10	; 16
 71a:	77 e2       	ldi	r23, 0x27	; 39
 71c:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 720:	b9 01       	movw	r22, r18
 722:	0e 94 98 05 	call	0xb30	; 0xb30 <__divmodhi4>
 726:	60 5d       	subi	r22, 0xD0	; 208
 728:	6b 83       	std	Y+3, r22	; 0x03
	Lcd4_Write_String(str);
 72a:	ce 01       	movw	r24, r28
 72c:	03 96       	adiw	r24, 0x03	; 3
 72e:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 732:	8d e3       	ldi	r24, 0x3D	; 61
 734:	99 e4       	ldi	r25, 0x49	; 73
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <_Z16print_fire_alarmv+0xde>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <_Z16print_fire_alarmv+0xe4>
 73c:	00 00       	nop
	
	_delay_ms(DELAY);				// delay DELAY ms between displaying "Fire!!!" and (for example)"Value: 13"
}
 73e:	27 96       	adiw	r28, 0x07	; 7
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	f8 94       	cli
 744:	de bf       	out	0x3e, r29	; 62
 746:	0f be       	out	0x3f, r0	; 63
 748:	cd bf       	out	0x3d, r28	; 61
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	08 95       	ret

00000754 <_Z14print_pump_msgv>:

void print_pump_msg()
{
	Lcd4_Clear();
 754:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z10Lcd4_Clearv>
	Lcd4_Set_Cursor(1,1);
 758:	61 e0       	ldi	r22, 0x01	; 1
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	Lcd4_Write_String("Pump ON");
 760:	8f e6       	ldi	r24, 0x6F	; 111
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
	Lcd4_Set_Cursor(2,1);
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z15Lcd4_Set_Cursorcc>
	Lcd4_Write_String("Throwing Water");
 770:	87 e7       	ldi	r24, 0x77	; 119
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Lcd4_Write_StringPKc>
 778:	8d e3       	ldi	r24, 0x3D	; 61
 77a:	99 e4       	ldi	r25, 0x49	; 73
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <_Z14print_pump_msgv+0x28>
 780:	00 c0       	rjmp	.+0      	; 0x782 <_Z14print_pump_msgv+0x2e>
 782:	00 00       	nop
 784:	08 95       	ret

00000786 <_Z11throw_waterv>:
	_delay_ms(DELAY);
}

void throw_water()
{
	PORTC |= (1<<PC1);	// High signal at PC1, clockwise rotation
 786:	a9 9a       	sbi	0x15, 1	; 21
	char watering_step = 4;
	int inc = (SERVO_SENSOR_FULL_RIGHT - SERVO_SENSOR_FULL_LEFT) / SERVO_SENSOR_STEP;
	if(direction == GO_RIGHT)
 788:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <direction>
 78c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <direction+0x1>
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	09 f0       	breq	.+2      	; 0x796 <_Z11throw_waterv+0x10>
 794:	58 c0       	rjmp	.+176    	; 0x846 <_Z11throw_waterv+0xc0>
	{
		int i = init_step-4;
 796:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <init_step>
 79a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <init_step+0x1>
 79e:	04 97       	sbiw	r24, 0x04	; 4
		while(i<init_step+watering_step)
 7a0:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <init_step>
 7a4:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <init_step+0x1>
 7a8:	2c 5f       	subi	r18, 0xFC	; 252
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
 7ac:	82 17       	cp	r24, r18
 7ae:	93 07       	cpc	r25, r19
 7b0:	54 f0       	brlt	.+20     	; 0x7c6 <_Z11throw_waterv+0x40>
		{
			OCR1A = SERVO_SENSOR_FULL_LEFT + i*inc;
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
		}
		while(i>=init_step-4)
 7b2:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <init_step>
 7b6:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <init_step+0x1>
 7ba:	24 50       	subi	r18, 0x04	; 4
 7bc:	31 09       	sbc	r19, r1
 7be:	82 17       	cp	r24, r18
 7c0:	93 07       	cpc	r25, r19
 7c2:	0c f5       	brge	.+66     	; 0x806 <_Z11throw_waterv+0x80>
 7c4:	9d c0       	rjmp	.+314    	; 0x900 <__stack+0xa1>
 7c6:	24 e1       	ldi	r18, 0x14	; 20
 7c8:	28 9f       	mul	r18, r24
 7ca:	a0 01       	movw	r20, r0
 7cc:	29 9f       	mul	r18, r25
 7ce:	50 0d       	add	r21, r0
 7d0:	11 24       	eor	r1, r1
 7d2:	4c 57       	subi	r20, 0x7C	; 124
 7d4:	5c 4f       	sbci	r21, 0xFC	; 252
	if(direction == GO_RIGHT)
	{
		int i = init_step-4;
		while(i<init_step+watering_step)
		{
			OCR1A = SERVO_SENSOR_FULL_LEFT + i*inc;
 7d6:	5b bd       	out	0x2b, r21	; 43
 7d8:	4a bd       	out	0x2a, r20	; 42
 7da:	2f e0       	ldi	r18, 0x0F	; 15
 7dc:	38 e9       	ldi	r19, 0x98	; 152
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	21 50       	subi	r18, 0x01	; 1
 7e2:	30 40       	sbci	r19, 0x00	; 0
 7e4:	60 40       	sbci	r22, 0x00	; 0
 7e6:	e1 f7       	brne	.-8      	; 0x7e0 <_Z11throw_waterv+0x5a>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <_Z11throw_waterv+0x64>
 7ea:	00 00       	nop
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
 7ec:	01 96       	adiw	r24, 0x01	; 1
	char watering_step = 4;
	int inc = (SERVO_SENSOR_FULL_RIGHT - SERVO_SENSOR_FULL_LEFT) / SERVO_SENSOR_STEP;
	if(direction == GO_RIGHT)
	{
		int i = init_step-4;
		while(i<init_step+watering_step)
 7ee:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <init_step>
 7f2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <init_step+0x1>
 7f6:	4c 5e       	subi	r20, 0xEC	; 236
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	2c 5f       	subi	r18, 0xFC	; 252
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	82 17       	cp	r24, r18
 800:	93 07       	cpc	r25, r19
 802:	4c f3       	brlt	.-46     	; 0x7d6 <_Z11throw_waterv+0x50>
 804:	d6 cf       	rjmp	.-84     	; 0x7b2 <_Z11throw_waterv+0x2c>
 806:	24 e1       	ldi	r18, 0x14	; 20
 808:	28 9f       	mul	r18, r24
 80a:	a0 01       	movw	r20, r0
 80c:	29 9f       	mul	r18, r25
 80e:	50 0d       	add	r21, r0
 810:	11 24       	eor	r1, r1
 812:	4c 57       	subi	r20, 0x7C	; 124
 814:	5c 4f       	sbci	r21, 0xFC	; 252
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
		}
		while(i>=init_step-4)
		{
			OCR1A = SERVO_SENSOR_FULL_LEFT + i*inc;
 816:	5b bd       	out	0x2b, r21	; 43
 818:	4a bd       	out	0x2a, r20	; 42
 81a:	2f e0       	ldi	r18, 0x0F	; 15
 81c:	38 e9       	ldi	r19, 0x98	; 152
 81e:	62 e0       	ldi	r22, 0x02	; 2
 820:	21 50       	subi	r18, 0x01	; 1
 822:	30 40       	sbci	r19, 0x00	; 0
 824:	60 40       	sbci	r22, 0x00	; 0
 826:	e1 f7       	brne	.-8      	; 0x820 <_Z11throw_waterv+0x9a>
 828:	00 c0       	rjmp	.+0      	; 0x82a <_Z11throw_waterv+0xa4>
 82a:	00 00       	nop
			_delay_ms(PUMP_ON_DELAY);
			i--;
 82c:	01 97       	sbiw	r24, 0x01	; 1
		{
			OCR1A = SERVO_SENSOR_FULL_LEFT + i*inc;
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
		}
		while(i>=init_step-4)
 82e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <init_step>
 832:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <init_step+0x1>
 836:	44 51       	subi	r20, 0x14	; 20
 838:	51 09       	sbc	r21, r1
 83a:	24 50       	subi	r18, 0x04	; 4
 83c:	31 09       	sbc	r19, r1
 83e:	82 17       	cp	r24, r18
 840:	93 07       	cpc	r25, r19
 842:	4c f7       	brge	.-46     	; 0x816 <_Z11throw_waterv+0x90>
 844:	5d c0       	rjmp	.+186    	; 0x900 <__stack+0xa1>
			OCR1A = SERVO_SENSOR_FULL_LEFT + i*inc;
			_delay_ms(PUMP_ON_DELAY);
			i--;
		}
	}
	else if(direction == GO_LEFT)
 846:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <direction>
 84a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <direction+0x1>
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	09 f0       	breq	.+2      	; 0x854 <_Z11throw_waterv+0xce>
 852:	56 c0       	rjmp	.+172    	; 0x900 <__stack+0xa1>
	{
		int i = init_step-4;
 854:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <init_step>
 858:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <init_step+0x1>
 85c:	24 50       	subi	r18, 0x04	; 4
 85e:	31 09       	sbc	r19, r1
		while(i<init_step+watering_step)
 860:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <init_step>
 864:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <init_step+0x1>
 868:	04 96       	adiw	r24, 0x04	; 4
 86a:	28 17       	cp	r18, r24
 86c:	39 07       	cpc	r19, r25
 86e:	4c f0       	brlt	.+18     	; 0x882 <__stack+0x23>
		{
			OCR1A = SERVO_SENSOR_FULL_RIGHT - i*inc;
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
		}
		while(i>=init_step-4)
 870:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <init_step>
 874:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <init_step+0x1>
 878:	04 97       	sbiw	r24, 0x04	; 4
 87a:	28 17       	cp	r18, r24
 87c:	39 07       	cpc	r19, r25
 87e:	0c f5       	brge	.+66     	; 0x8c2 <__stack+0x63>
 880:	3f c0       	rjmp	.+126    	; 0x900 <__stack+0xa1>
 882:	6c ee       	ldi	r22, 0xEC	; 236
 884:	62 03       	mulsu	r22, r18
 886:	a0 01       	movw	r20, r0
 888:	63 9f       	mul	r22, r19
 88a:	50 0d       	add	r21, r0
 88c:	11 24       	eor	r1, r1
 88e:	4c 5c       	subi	r20, 0xCC	; 204
 890:	57 4f       	sbci	r21, 0xF7	; 247
	else if(direction == GO_LEFT)
	{
		int i = init_step-4;
		while(i<init_step+watering_step)
		{
			OCR1A = SERVO_SENSOR_FULL_RIGHT - i*inc;
 892:	5b bd       	out	0x2b, r21	; 43
 894:	4a bd       	out	0x2a, r20	; 42
 896:	6f e0       	ldi	r22, 0x0F	; 15
 898:	88 e9       	ldi	r24, 0x98	; 152
 89a:	92 e0       	ldi	r25, 0x02	; 2
 89c:	61 50       	subi	r22, 0x01	; 1
 89e:	80 40       	sbci	r24, 0x00	; 0
 8a0:	90 40       	sbci	r25, 0x00	; 0
 8a2:	e1 f7       	brne	.-8      	; 0x89c <__stack+0x3d>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
 8a6:	00 00       	nop
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
 8a8:	2f 5f       	subi	r18, 0xFF	; 255
 8aa:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	else if(direction == GO_LEFT)
	{
		int i = init_step-4;
		while(i<init_step+watering_step)
 8ac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <init_step>
 8b0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <init_step+0x1>
 8b4:	44 51       	subi	r20, 0x14	; 20
 8b6:	51 09       	sbc	r21, r1
 8b8:	04 96       	adiw	r24, 0x04	; 4
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	4c f3       	brlt	.-46     	; 0x892 <__stack+0x33>
 8c0:	d7 cf       	rjmp	.-82     	; 0x870 <__stack+0x11>
 8c2:	6c ee       	ldi	r22, 0xEC	; 236
 8c4:	62 03       	mulsu	r22, r18
 8c6:	a0 01       	movw	r20, r0
 8c8:	63 9f       	mul	r22, r19
 8ca:	50 0d       	add	r21, r0
 8cc:	11 24       	eor	r1, r1
 8ce:	4c 5c       	subi	r20, 0xCC	; 204
 8d0:	57 4f       	sbci	r21, 0xF7	; 247
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
		}
		while(i>=init_step-4)
		{
			OCR1A = SERVO_SENSOR_FULL_RIGHT - i*inc;
 8d2:	5b bd       	out	0x2b, r21	; 43
 8d4:	4a bd       	out	0x2a, r20	; 42
 8d6:	6f e0       	ldi	r22, 0x0F	; 15
 8d8:	88 e9       	ldi	r24, 0x98	; 152
 8da:	92 e0       	ldi	r25, 0x02	; 2
 8dc:	61 50       	subi	r22, 0x01	; 1
 8de:	80 40       	sbci	r24, 0x00	; 0
 8e0:	90 40       	sbci	r25, 0x00	; 0
 8e2:	e1 f7       	brne	.-8      	; 0x8dc <__stack+0x7d>
 8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <__stack+0x87>
 8e6:	00 00       	nop
			_delay_ms(PUMP_ON_DELAY);
			i--;
 8e8:	21 50       	subi	r18, 0x01	; 1
 8ea:	31 09       	sbc	r19, r1
		{
			OCR1A = SERVO_SENSOR_FULL_RIGHT - i*inc;
			_delay_ms(PUMP_ON_DELAY);	// Turn on motor for PUMP_ON_DELAY ms
			i++;
		}
		while(i>=init_step-4)
 8ec:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <init_step>
 8f0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <init_step+0x1>
 8f4:	4c 5e       	subi	r20, 0xEC	; 236
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	04 97       	sbiw	r24, 0x04	; 4
 8fa:	28 17       	cp	r18, r24
 8fc:	39 07       	cpc	r19, r25
 8fe:	4c f7       	brge	.-46     	; 0x8d2 <__stack+0x73>
			OCR1A = SERVO_SENSOR_FULL_RIGHT - i*inc;
			_delay_ms(PUMP_ON_DELAY);
			i--;
		}
	}
	PORTC &= ~(1<<PC1); // Low signal at PC1, stop motor
 900:	a9 98       	cbi	0x15, 1	; 21
 902:	08 95       	ret

00000904 <_Z11sweep_rightv>:
}

int sweep_right()
{
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
	int inc = (SERVO_SENSOR_FULL_RIGHT - SERVO_SENSOR_FULL_LEFT) / SERVO_SENSOR_STEP;
	for(int i=init_step; i<SERVO_SENSOR_STEP; i++)
 90c:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <init_step>
 910:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <init_step+0x1>
 914:	cc 33       	cpi	r28, 0x3C	; 60
 916:	d1 05       	cpc	r29, r1
 918:	44 f5       	brge	.+80     	; 0x96a <_Z11sweep_rightv+0x66>
 91a:	84 e1       	ldi	r24, 0x14	; 20
 91c:	8c 9f       	mul	r24, r28
 91e:	80 01       	movw	r16, r0
 920:	8d 9f       	mul	r24, r29
 922:	10 0d       	add	r17, r0
 924:	11 24       	eor	r1, r1
 926:	0c 57       	subi	r16, 0x7C	; 124
 928:	1c 4f       	sbci	r17, 0xFC	; 252
	{
		// Generate PWM to start Servo motor
		OCR1A = SERVO_SENSOR_FULL_LEFT + i*inc;
 92a:	1b bd       	out	0x2b, r17	; 43
 92c:	0a bd       	out	0x2a, r16	; 42
		// Read data from IR sensor and print to LCD
		get_sensor_data();
 92e:	0e 94 ca 02 	call	0x594	; 0x594 <_Z15get_sensor_datav>
		print_sensor_data();
 932:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z17print_sensor_datav>
		if(sensor_value < FIRE_THRESHOLD)
 936:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 93a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 93e:	84 36       	cpi	r24, 0x64	; 100
 940:	91 05       	cpc	r25, r1
 942:	3c f4       	brge	.+14     	; 0x952 <_Z11sweep_rightv+0x4e>
		{
			// Fire detected
			init_step = i;					// store i, so that servo can start from the position it stopped last.
 944:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <init_step+0x1>
 948:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <init_step>
			return STATE_FIRE_DETECTED;		// Do not give further PWM signal to motor
 94c:	83 e0       	ldi	r24, 0x03	; 3
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	18 c0       	rjmp	.+48     	; 0x982 <_Z11sweep_rightv+0x7e>
 952:	8d e3       	ldi	r24, 0x3D	; 61
 954:	99 e4       	ldi	r25, 0x49	; 73
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <_Z11sweep_rightv+0x52>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <_Z11sweep_rightv+0x58>
 95c:	00 00       	nop
}

int sweep_right()
{
	int inc = (SERVO_SENSOR_FULL_RIGHT - SERVO_SENSOR_FULL_LEFT) / SERVO_SENSOR_STEP;
	for(int i=init_step; i<SERVO_SENSOR_STEP; i++)
 95e:	21 96       	adiw	r28, 0x01	; 1
 960:	0c 5e       	subi	r16, 0xEC	; 236
 962:	1f 4f       	sbci	r17, 0xFF	; 255
 964:	cc 33       	cpi	r28, 0x3C	; 60
 966:	d1 05       	cpc	r29, r1
 968:	01 f7       	brne	.-64     	; 0x92a <_Z11sweep_rightv+0x26>
			return STATE_FIRE_DETECTED;		// Do not give further PWM signal to motor
		}
		_delay_ms(DELAY);
	}
	// Servo completed all steps. So set init_step to 0
	init_step = 0;
 96a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <init_step+0x1>
 96e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <init_step>
	// Servo is now in right most position. So servo should start sweeping left.
	direction = GO_LEFT;
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	9f ef       	ldi	r25, 0xFF	; 255
 976:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <direction+0x1>
 97a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <direction>

	return STATE_SWEEP;		// Keep sweeping
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
}
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	1f 91       	pop	r17
 988:	0f 91       	pop	r16
 98a:	08 95       	ret

0000098c <_Z10sweep_leftv>:

int sweep_left()
{
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
	int inc = (SERVO_SENSOR_FULL_RIGHT - SERVO_SENSOR_FULL_LEFT) / SERVO_SENSOR_STEP;
	for(int i=init_step; i<SERVO_SENSOR_STEP; i++)
 994:	00 91 88 00 	lds	r16, 0x0088	; 0x800088 <init_step>
 998:	10 91 89 00 	lds	r17, 0x0089	; 0x800089 <init_step+0x1>
 99c:	0c 33       	cpi	r16, 0x3C	; 60
 99e:	11 05       	cpc	r17, r1
 9a0:	44 f5       	brge	.+80     	; 0x9f2 <_Z10sweep_leftv+0x66>
 9a2:	2c ee       	ldi	r18, 0xEC	; 236
 9a4:	20 03       	mulsu	r18, r16
 9a6:	e0 01       	movw	r28, r0
 9a8:	21 9f       	mul	r18, r17
 9aa:	d0 0d       	add	r29, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	cc 5c       	subi	r28, 0xCC	; 204
 9b0:	d7 4f       	sbci	r29, 0xF7	; 247
	{
		// Generate PWM to start Servo motor
		OCR1A = SERVO_SENSOR_FULL_RIGHT - i*inc;
 9b2:	db bd       	out	0x2b, r29	; 43
 9b4:	ca bd       	out	0x2a, r28	; 42
		// Read data from IR sensor and print to LCD
		get_sensor_data();
 9b6:	0e 94 ca 02 	call	0x594	; 0x594 <_Z15get_sensor_datav>
		print_sensor_data();
 9ba:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z17print_sensor_datav>
		if(sensor_value < FIRE_THRESHOLD)
 9be:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 9c2:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 9c6:	84 36       	cpi	r24, 0x64	; 100
 9c8:	91 05       	cpc	r25, r1
 9ca:	3c f4       	brge	.+14     	; 0x9da <_Z10sweep_leftv+0x4e>
		{
			// Fire detected
			init_step = i;					// store i, so that servo can start from the position it stopped last.
 9cc:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <init_step+0x1>
 9d0:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <init_step>
			return STATE_FIRE_DETECTED;		// Do not give further PWM signal to motor
 9d4:	83 e0       	ldi	r24, 0x03	; 3
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <_Z10sweep_leftv+0x7a>
 9da:	8d e3       	ldi	r24, 0x3D	; 61
 9dc:	99 e4       	ldi	r25, 0x49	; 73
 9de:	01 97       	sbiw	r24, 0x01	; 1
 9e0:	f1 f7       	brne	.-4      	; 0x9de <_Z10sweep_leftv+0x52>
 9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <_Z10sweep_leftv+0x58>
 9e4:	00 00       	nop
}

int sweep_left()
{
	int inc = (SERVO_SENSOR_FULL_RIGHT - SERVO_SENSOR_FULL_LEFT) / SERVO_SENSOR_STEP;
	for(int i=init_step; i<SERVO_SENSOR_STEP; i++)
 9e6:	0f 5f       	subi	r16, 0xFF	; 255
 9e8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ea:	64 97       	sbiw	r28, 0x14	; 20
 9ec:	0c 33       	cpi	r16, 0x3C	; 60
 9ee:	11 05       	cpc	r17, r1
 9f0:	01 f7       	brne	.-64     	; 0x9b2 <_Z10sweep_leftv+0x26>
			return STATE_FIRE_DETECTED;		// Do not give further PWM signal to motor
		}
		_delay_ms(DELAY);
	}
	// Servo completed all steps. So set init_step to 0
	init_step = 0;
 9f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <init_step+0x1>
 9f6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <init_step>
	// Servo is now in left most position. So servo should start sweeping right.
	direction = GO_RIGHT;
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <direction+0x1>
 a02:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <direction>
	
	return STATE_SWEEP;		// Keep sweeping
}
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	08 95       	ret

00000a10 <main>:

int main(void)
{
	state = STATE_INITIALIZE;
 a10:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <state+0x1>
 a14:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <state>
					PORTA |= (1<<PA0);
					//_delay_ms(50);
					//PORTA &= ~(1<<PA0);
					
					// start pump to throw water 
					state = STATE_PUMP_ON;
 a18:	04 e0       	ldi	r16, 0x04	; 4
 a1a:	10 e0       	ldi	r17, 0x00	; 0
					// Fire extinguished
					if(fire_state_counter >= -2) fire_state_counter--;	// if fire is already sensed wait a bit for confirmation before re-initializing
					else
					{
						fire_state_counter = 0;	// re-initialize
						state = STATE_SWEEP;	// Start sweeping again
 a1c:	c1 e0       	ldi	r28, 0x01	; 1
 a1e:	d0 e0       	ldi	r29, 0x00	; 0
	
    while (1) 
    {	
		//get_and_print_sensor_data();
		//_delay_ms(500);
		switch (state)
 a20:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <state>
 a24:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <state+0x1>
 a28:	81 30       	cpi	r24, 0x01	; 1
 a2a:	91 05       	cpc	r25, r1
 a2c:	91 f0       	breq	.+36     	; 0xa52 <main+0x42>
 a2e:	1c f4       	brge	.+6      	; 0xa36 <main+0x26>
 a30:	89 2b       	or	r24, r25
 a32:	41 f0       	breq	.+16     	; 0xa44 <main+0x34>
 a34:	f5 cf       	rjmp	.-22     	; 0xa20 <main+0x10>
 a36:	83 30       	cpi	r24, 0x03	; 3
 a38:	91 05       	cpc	r25, r1
 a3a:	29 f1       	breq	.+74     	; 0xa86 <main+0x76>
 a3c:	04 97       	sbiw	r24, 0x04	; 4
 a3e:	09 f4       	brne	.+2      	; 0xa42 <main+0x32>
 a40:	5d c0       	rjmp	.+186    	; 0xafc <main+0xec>
 a42:	ee cf       	rjmp	.-36     	; 0xa20 <main+0x10>
		{
			case STATE_INITIALIZE:
				initialize();
 a44:	0e 94 98 02 	call	0x530	; 0x530 <_Z10initializev>
				state = STATE_SWEEP;
 a48:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <state+0x1>
 a4c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <state>
				break;
 a50:	e7 cf       	rjmp	.-50     	; 0xa20 <main+0x10>
			
			case STATE_SWEEP:
				// if a fire is detected sweep_left & sweep_right both function return STATE_FIRE_DETECTED
				// else they both return STATE_SWEEP
				if(direction==GO_LEFT)
 a52:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <direction>
 a56:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <direction+0x1>
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	39 f4       	brne	.+14     	; 0xa6c <main+0x5c>
				{
					state = sweep_left();
 a5e:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z10sweep_leftv>
 a62:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <state+0x1>
 a66:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <state>
 a6a:	da cf       	rjmp	.-76     	; 0xa20 <main+0x10>
				}
				else if(direction==GO_RIGHT) 
 a6c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <direction>
 a70:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <direction+0x1>
 a74:	01 97       	sbiw	r24, 0x01	; 1
 a76:	a1 f6       	brne	.-88     	; 0xa20 <main+0x10>
				{
					state = sweep_right();
 a78:	0e 94 82 04 	call	0x904	; 0x904 <_Z11sweep_rightv>
 a7c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <state+0x1>
 a80:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <state>
 a84:	cd cf       	rjmp	.-102    	; 0xa20 <main+0x10>
				}
				break;
				
			case STATE_FIRE_DETECTED:
				get_sensor_data();
 a86:	0e 94 ca 02 	call	0x594	; 0x594 <_Z15get_sensor_datav>
				print_fire_alarm();
 a8a:	0e 94 2c 03 	call	0x658	; 0x658 <_Z16print_fire_alarmv>
				if(sensor_value > FIRE_THRESHOLD)
 a8e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 a92:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 a96:	85 36       	cpi	r24, 0x65	; 101
 a98:	91 05       	cpc	r25, r1
 a9a:	d4 f0       	brlt	.+52     	; 0xad0 <main+0xc0>
				{
					// Fire extinguished
					if(fire_state_counter >= -2) fire_state_counter--;	// if fire is already sensed wait a bit for confirmation before re-initializing
 a9c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 aa0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 aa4:	8e 3f       	cpi	r24, 0xFE	; 254
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	54 f0       	brlt	.+20     	; 0xabe <main+0xae>
 aaa:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 aae:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 ab2:	01 97       	sbiw	r24, 0x01	; 1
 ab4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 ab8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 abc:	12 c0       	rjmp	.+36     	; 0xae2 <main+0xd2>
					else
					{
						fire_state_counter = 0;	// re-initialize
 abe:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 ac2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
						state = STATE_SWEEP;	// Start sweeping again
 ac6:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <state+0x1>
 aca:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <state>
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <main+0xd2>
					}
				}
				else fire_state_counter++;
 ad0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 ad4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 ade:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
				if(fire_state_counter > FIRE_CONFIRMATION_COUNT)
 ae2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 ae6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 aea:	04 97       	sbiw	r24, 0x04	; 4
 aec:	0c f4       	brge	.+2      	; 0xaf0 <main+0xe0>
 aee:	98 cf       	rjmp	.-208    	; 0xa20 <main+0x10>
				{
					// fire detection confirmed
					// Signal sent to Atmega of GSM
					PORTA |= (1<<PA0);
 af0:	d8 9a       	sbi	0x1b, 0	; 27
					//_delay_ms(50);
					//PORTA &= ~(1<<PA0);
					
					// start pump to throw water 
					state = STATE_PUMP_ON;
 af2:	10 93 8d 00 	sts	0x008D, r17	; 0x80008d <state+0x1>
 af6:	00 93 8c 00 	sts	0x008C, r16	; 0x80008c <state>
 afa:	92 cf       	rjmp	.-220    	; 0xa20 <main+0x10>
				}
				
				break;
			
			case STATE_PUMP_ON:
				print_pump_msg();
 afc:	0e 94 aa 03 	call	0x754	; 0x754 <_Z14print_pump_msgv>
				throw_water();
 b00:	0e 94 c3 03 	call	0x786	; 0x786 <_Z11throw_waterv>
				get_sensor_data();
 b04:	0e 94 ca 02 	call	0x594	; 0x594 <_Z15get_sensor_datav>
				print_sensor_data();
 b08:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z17print_sensor_datav>
				if(sensor_value > FIRE_THRESHOLD)
 b0c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sensor_value>
 b10:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <sensor_value+0x1>
 b14:	85 36       	cpi	r24, 0x65	; 101
 b16:	91 05       	cpc	r25, r1
 b18:	0c f4       	brge	.+2      	; 0xb1c <main+0x10c>
 b1a:	82 cf       	rjmp	.-252    	; 0xa20 <main+0x10>
				{
					PORTA &= ~(1<<PA0);
 b1c:	d8 98       	cbi	0x1b, 0	; 27
					// Fire extinguished
					fire_state_counter = 0;
 b1e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 b22:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
					state = STATE_SWEEP;
 b26:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <state+0x1>
 b2a:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <state>
 b2e:	78 cf       	rjmp	.-272    	; 0xa20 <main+0x10>

00000b30 <__divmodhi4>:
 b30:	97 fb       	bst	r25, 7
 b32:	07 2e       	mov	r0, r23
 b34:	16 f4       	brtc	.+4      	; 0xb3a <__divmodhi4+0xa>
 b36:	00 94       	com	r0
 b38:	07 d0       	rcall	.+14     	; 0xb48 <__divmodhi4_neg1>
 b3a:	77 fd       	sbrc	r23, 7
 b3c:	09 d0       	rcall	.+18     	; 0xb50 <__divmodhi4_neg2>
 b3e:	0e 94 ac 05 	call	0xb58	; 0xb58 <__udivmodhi4>
 b42:	07 fc       	sbrc	r0, 7
 b44:	05 d0       	rcall	.+10     	; 0xb50 <__divmodhi4_neg2>
 b46:	3e f4       	brtc	.+14     	; 0xb56 <__divmodhi4_exit>

00000b48 <__divmodhi4_neg1>:
 b48:	90 95       	com	r25
 b4a:	81 95       	neg	r24
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	08 95       	ret

00000b50 <__divmodhi4_neg2>:
 b50:	70 95       	com	r23
 b52:	61 95       	neg	r22
 b54:	7f 4f       	sbci	r23, 0xFF	; 255

00000b56 <__divmodhi4_exit>:
 b56:	08 95       	ret

00000b58 <__udivmodhi4>:
 b58:	aa 1b       	sub	r26, r26
 b5a:	bb 1b       	sub	r27, r27
 b5c:	51 e1       	ldi	r21, 0x11	; 17
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <__udivmodhi4_ep>

00000b60 <__udivmodhi4_loop>:
 b60:	aa 1f       	adc	r26, r26
 b62:	bb 1f       	adc	r27, r27
 b64:	a6 17       	cp	r26, r22
 b66:	b7 07       	cpc	r27, r23
 b68:	10 f0       	brcs	.+4      	; 0xb6e <__udivmodhi4_ep>
 b6a:	a6 1b       	sub	r26, r22
 b6c:	b7 0b       	sbc	r27, r23

00000b6e <__udivmodhi4_ep>:
 b6e:	88 1f       	adc	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	5a 95       	dec	r21
 b74:	a9 f7       	brne	.-22     	; 0xb60 <__udivmodhi4_loop>
 b76:	80 95       	com	r24
 b78:	90 95       	com	r25
 b7a:	bc 01       	movw	r22, r24
 b7c:	cd 01       	movw	r24, r26
 b7e:	08 95       	ret

00000b80 <_exit>:
 b80:	f8 94       	cli

00000b82 <__stop_program>:
 b82:	ff cf       	rjmp	.-2      	; 0xb82 <__stop_program>
